<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <meta name="theme-color" content="#3b82f6">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="default">
  <title>TODOアプリ</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="/main.css" rel="stylesheet">
</head>
<body>
  <div class="container">
    <h1>TODOリスト</h1>
    <div style="text-align:right; color:#64748b; font-size:0.98em; margin-bottom:0.5em;">
      現在時刻: <%= now.toLocaleString('ja-JP', { hour12: false }) %>
    </div>    
    <details class="settings-details" style="margin-bottom:1em;">
      <summary class="settings-summary" style="cursor:pointer; font-weight:bold; color:#2563eb; padding:0.3em 0;">
      各種設定
      </summary>
      <div class="settings-content" style="margin-top:0.5em;">
      <a href="/categories" class="btn btn-outline-primary" title="カテゴリ管理" style="font-size:1.1em;">
        📂 カテゴリ管理
      </a>
      </div>
    </details>
    <form action="/add" method="post">
      <input type="text" name="task" placeholder="新しいタスク" required>
      <select name="due_type" id="due_type" style="margin-bottom:0.2em;">
        <option value="date">日付のみ</option>
        <option value="datetime">日付＋時間</option>
      </select>
      <input type="date" name="due_date" id="due_date" placeholder="期限日" style="display:inline-block;">
      <input type="datetime-local" name="due_datetime" id="due_datetime" placeholder="期限日時" style="display:none;">
      <script>
        // 入力切替スクリプト
        document.addEventListener('DOMContentLoaded', function() {
          const typeSel = document.getElementById('due_type');
          const dateInput = document.getElementById('due_date');
          const datetimeInput = document.getElementById('due_datetime');
          typeSel.addEventListener('change', function() {
            if (typeSel.value === 'datetime') {
              dateInput.style.display = 'none';
              datetimeInput.style.display = 'inline-block';
            } else {
              dateInput.style.display = 'inline-block';
              datetimeInput.style.display = 'none';
            }
          });
        });
      </script>
      <select name="category_id">
        <option value="">カテゴリ選択</option>
        <% categories.forEach(cat => { %>
          <option value="<%= cat.id %>"><%= cat.name %></option>
        <% }) %>
      </select>
      <button type="submit" title="追加">➕</button>      
    </form>
    <% const today = new Date().toISOString().slice(0, 10); %>
    <!-- カテゴリ未設定を先頭に表示 -->
    <div class="category-block">
      <div class="category-title">カテゴリ未設定</div>
      <ul>
        <% todos.filter(todo => !todo.category_id).forEach(todo => { %>
          <%- include('partials/task', { todo, today }) %>
        <% }) %>
      </ul>
    </div>
    <!-- カテゴリ付きタスクを後ろに -->
    <% categories.forEach(cat => { %>
      <div class="category-block">
        <div class="category-title"><%= cat.name %></div>
        <ul>
          <% todos.filter(todo => todo.category_id === cat.id).forEach(todo => { %>
            <%- include('partials/task', { todo, today }) %>
          <% }) %>
        </ul>
      </div>
    <% }) %>
    <%- include('footer') %>
  </div>
  <script>
  document.addEventListener('DOMContentLoaded', function() {
    // 削除ボタンのクリック時に確認ダイアログを表示
    document.querySelectorAll('form[action^="/delete/"] button[type="submit"]').forEach(btn => {
      btn.addEventListener('click', function(e) {
        if (!confirm('本当に削除しますか？この操作は元に戻せません。')) {
          e.preventDefault();
        }
      });
    });

    // Ajax機能の初期化
    initAjaxFunctionality();
  });

  function initAjaxFunctionality() {
    // タスク追加フォームのAjax化
    const addForm = document.querySelector('form[action="/add"]');
    if (addForm) {
      addForm.addEventListener('submit', handleTaskAdd);
    }

    // 各タスクのアクション（完了・削除等）のAjax化
    attachTaskActionListeners();
  }

  function handleTaskAdd(e) {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    const submitBtn = form.querySelector('button[type="submit"]');
    
    // 送信中の表示
    const originalBtnText = submitBtn.innerHTML;
    submitBtn.innerHTML = '⏳';
    submitBtn.disabled = true;

    fetch('/api/add', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        task: formData.get('task'),
        due_date: formData.get('due_date'),
        due_datetime: formData.get('due_datetime'),
        category_id: formData.get('category_id')
      })
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        // フォームをリセット
        form.reset();
        // タスク一覧を更新
        refreshTaskList();
      } else {
        throw new Error(data.error || 'タスク追加に失敗しました');
      }
    })
    .catch(error => {
      console.error('Ajax error:', error);
      // エラー時は従来のフォーム送信にフォールバック
      submitBtn.innerHTML = originalBtnText;
      submitBtn.disabled = false;
      form.removeEventListener('submit', handleTaskAdd);
      form.submit();
    })
    .finally(() => {
      submitBtn.innerHTML = originalBtnText;
      submitBtn.disabled = false;
    });
  }

  function attachTaskActionListeners() {
    // 完了/未完了ボタン
    document.querySelectorAll('form[action^="/done/"], form[action^="/undone/"]').forEach(form => {
      form.addEventListener('submit', handleTaskAction);
    });

    // 削除ボタン
    document.querySelectorAll('form[action^="/delete/"]').forEach(form => {
      form.addEventListener('submit', handleTaskDelete);
    });
  }

  function handleTaskAction(e) {
    e.preventDefault();
    const form = e.target;
    const action = form.getAttribute('action');
    const submitBtn = form.querySelector('button[type="submit"]');
    
    // APIエンドポイントに変換
    const apiAction = action.replace('/done/', '/api/done/').replace('/undone/', '/api/undone/');
    
    // 送信中の表示
    const originalBtnText = submitBtn.innerHTML;
    submitBtn.innerHTML = '⏳';
    submitBtn.disabled = true;

    fetch(apiAction, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        // タスク一覧を更新
        refreshTaskList();
      } else {
        throw new Error(data.error || 'タスク操作に失敗しました');
      }
    })
    .catch(error => {
      console.error('Ajax error:', error);
      // エラー時は従来のフォーム送信にフォールバック
      submitBtn.innerHTML = originalBtnText;
      submitBtn.disabled = false;
      form.removeEventListener('submit', handleTaskAction);
      form.submit();
    })
    .finally(() => {
      submitBtn.innerHTML = originalBtnText;
      submitBtn.disabled = false;
    });
  }

  function handleTaskDelete(e) {
    e.preventDefault();
    const form = e.target;
    const action = form.getAttribute('action');
    
    // 削除確認
    if (!confirm('本当に削除しますか？この操作は元に戻せません。')) {
      return;
    }

    const submitBtn = form.querySelector('button[type="submit"]');
    const apiAction = action.replace('/delete/', '/api/delete/');
    
    // 送信中の表示
    const originalBtnText = submitBtn.innerHTML;
    submitBtn.innerHTML = '⏳';
    submitBtn.disabled = true;

    fetch(apiAction, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        // タスク一覧を更新
        refreshTaskList();
      } else {
        throw new Error(data.error || 'タスク削除に失敗しました');
      }
    })
    .catch(error => {
      console.error('Ajax error:', error);
      // エラー時は従来のフォーム送信にフォールバック
      submitBtn.innerHTML = originalBtnText;
      submitBtn.disabled = false;
      form.removeEventListener('submit', handleTaskDelete);
      form.submit();
    })
    .finally(() => {
      submitBtn.innerHTML = originalBtnText;
      submitBtn.disabled = false;
    });
  }

  function refreshTaskList() {
    fetch('/api/todos')
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      updateTaskListDOM(data.todos, data.categories);
    })
    .catch(error => {
      console.error('Failed to refresh task list:', error);
      // エラー時はページをリロード
      window.location.reload();
    });
  }

  function updateTaskListDOM(todos, categories) {
    const today = new Date().toISOString().slice(0, 10);
    
    // カテゴリ未設定のタスクを更新
    const uncategorizedBlock = document.querySelector('.category-block:first-of-type ul');
    if (uncategorizedBlock) {
      const uncategorizedTodos = todos.filter(todo => !todo.category_id);
      uncategorizedBlock.innerHTML = uncategorizedTodos.map(todo => generateTaskHTML(todo, today)).join('');
    }

    // カテゴリ付きタスクを更新
    categories.forEach((cat, index) => {
      const categoryBlock = document.querySelectorAll('.category-block')[index + 1];
      if (categoryBlock) {
        const categoryTodos = todos.filter(todo => todo.category_id === cat.id);
        const ul = categoryBlock.querySelector('ul');
        if (ul) {
          ul.innerHTML = categoryTodos.map(todo => generateTaskHTML(todo, today)).join('');
        }
      }
    });

    // 新しいタスクアクションリスナーを設定
    attachTaskActionListeners();
  }

  function generateTaskHTML(todo, today) {
    const overdueClass = todo.due_date && todo.due_date < today && !todo.done ? 'overdue' : '';
    const doneClass = todo.done ? 'done' : '';
    
    let dueDateDisplay = '';
    if (todo.due_date) {
      if (todo.due_date.length > 10) {
        dueDateDisplay = `〆${todo.due_date.slice(5, 16).replace(' ', '/')}`;
      } else {
        dueDateDisplay = `〆${todo.due_date.slice(5)}`;
      }
    }

    const completeAction = todo.done ? 
      `<form action="/undone/${todo.id}" method="post" style="display:inline;">
        <button type="submit" title="未完了に戻す">↩️</button>
      </form>` : 
      `<form action="/done/${todo.id}" method="post" style="display:inline;">
        <button type="submit" title="完了">✅</button>
      </form>`;

    return `
      <li class="${overdueClass}">
        <span class="${doneClass}">${todo.task}</span>
        <span class="task-meta">${dueDateDisplay}</span>
        <span class="task-actions">
          ${completeAction}
          <form action="/edit/${todo.id}" method="get" style="display:inline;">
            <button type="submit" title="編集">✏️</button>
          </form>
          <form action="/delete/${todo.id}" method="post" style="display:inline;">
            <button type="submit" title="削除">🗑️</button>
          </form>
        </span>
      </li>
    `;
  }
</script>
</body>
</html>
